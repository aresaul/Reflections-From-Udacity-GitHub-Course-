What happens when you initialize a repository?  Why do you need to do it?
-When you initialize a repository, git creates a file inside the repository (a .git file) so that 
the changes to that directory can be tracked.  I need to remember that it doesn't automatically commit
for you, the first commit (just like subsequent commits) needs to be made manually.

How is the staging area different from the working directory and the repository?  What value do you think
it offers?
-The staging area is different because it is only a temporary area to hold information in.  It helps
to differentiate between what is saved (in the working directory) and what is committed (in git).
The advantage of having such an area is that it allows the user to change single or multiple files in 
a commit.

How can you use the staging area to make sure you have one commit per logical change?
-You can use the staging area in this way by using the git status or git diff (no arguments) or
git diff(-- staged) commands.  These will tell you what changes have been made to the current version
of the file in the staging area.  In this way, you can make sure to do one commit per logical change.

What are some situations when branches would be helpful in keeping your history organized?  How 
would branches help?
-Some situations were as the lecturer mentioned.  If you're working on an experimental feature of a program,
working in a different language, etc.  These all would be situations in which you'd like to create a branching
structure for your repository.