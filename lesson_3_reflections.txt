When would you want to use a remote repository rather than keeping all your work local?
-I would want to create a remote repository if I had, say, multiple computers working on the same project.
For example, if I was working on a work project at home and had two different computers contributing to the same git repo.
This would also be useful if collaborating with others in a team environment.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date
with your remote repository?
-Pulling changes manually gives you a greater degree of control over what your local directory looks like.
If GitHub were to automatically push changes to your local environment, you might not be "kept in the loop"
so to speak, about what your local environment looks like.  Collaborators would be able to alter your local
environment without your permission, so this isn't a good idea.

Describe the differences between forks, clones and branches.  When would you use one instead of another?
-A clone is copying a repo from one place to another.  I think of a fork as a special case of cloning, 
in which both the source and destination are on GitHub.  A branch is, as we saw before, just a way of 
organizing commits such that you can preserve a master version and try experimental features.  When copying
files from GitHub to the local computer, you can use clone.  When copying files from someone else's GitHub
to your own, you can use fork.  When working on a large file that needs additional organization to its commits,
you can use branches.  

What is the benefit of having a copy of the last known state of the remote stored locally?
-Having the last known state stored locally is useful because it allows for a great degree of offline work.
For example, if a collaborator is going to be out of touch for a period of time,  having the last known state
of the repository stored locally on their machine allows them to work even while offline.